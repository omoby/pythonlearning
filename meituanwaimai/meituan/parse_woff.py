#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Date        : 2019-08-24 09:36:50
# @Author      : QQ859699677
# @Link        : github.com/joson1205
# @Description : 美团外卖H5页面销售数据解密

from fontTools.ttLib import TTFont


# 解析字体文件 ，获取相应的字体映射关系
# 预设坐标值,
def getGlyphCoordinates():
    """
    获取字体轮廓坐标,手动修改key值为对应数字
    """
    font = TTFont('6c38b92f.woff')
    font.saveXML("bd10f635.xml")
    glyfList = list(font['glyf'].keys())
    data = dict()
    for key in glyfList:
        # 剔除非数字的字体
        if key[0:3] == 'uni':
            data[key] = list(font['glyf'][key].coordinates)
    return data


# data = getGlyphCoordinates()
data = {
    '0': [(42, 353), (42, 483), (67, 557), (93, 635), (197, 719), (275, 719), (389, 719), (448, 628), (476, 586),
          (492, 522), (508, 462), (508, 353), (508, 290), (496, 188), (482, 149), (455, 71), (354, -12), (275, -12),
          (172, -12), (112, 62), (42, 150), (132, 353), (132, 176), (213, 60), (335, 60), (418, 177), (418, 529),
          (376, 588), (336, 646), (213, 646), (177, 595), (132, 529)],
    '1': [(373, 0), (285, 0), (285, 560), (253, 530), (149, 470), (109, 454), (109, 539), (182, 573), (238, 623),
          (265, 648), (305, 696), (316, 719), (373, 719)],
    '2': [(503, 84), (503, 0), (30, 0), (30, 31), (41, 61), (51, 86), (78, 133), (118, 180), (175, 233), (213, 265),
          (271, 313), (350, 387), (371, 416), (412, 472), (412, 573), (337, 646), (277, 646), (214, 646), (138, 572),
          (137, 502), (47, 512), (56, 614), (176, 719), (382, 719), (502, 605), (502, 520), (502, 475), (469, 398),
          (426, 348), (406, 325), (339, 262), (291, 222), (251, 189), (201, 144), (178, 120), (160, 97), (152, 84)],
    '3': [(130, 201), (145, 126), (216, 60), (270, 60), (332, 60), (417, 146), (417, 270), (378, 309), (337, 349),
          (277, 349), (251, 349), (215, 339), (225, 416), (239, 415), (296, 415), (385, 474), (385, 535), (385, 583),
          (322, 646), (268, 646), (217, 646), (149, 584), (139, 518), (51, 533), (67, 623), (124, 670), (182, 719),
          (266, 719), (324, 719), (374, 693), (423, 669), (476, 581), (476, 485), (426, 410), (377, 388), (440, 373),
          (511, 281), (511, 211), (511, 118), (374, -13), (270, -13), (175, -13), (51, 99), (42, 189)],
    '4': [(323, 0), (323, 171), (13, 171), (13, 252), (339, 716), (411, 716), (411, 252), (508, 252), (508, 171),
          (411, 171), (411, 0), (323, 252), (323, 575), (99, 252)],
    '5': [(134, 195), (144, 126), (217, 60), (271, 60), (335, 60), (423, 158), (423, 311), (337, 397), (270, 397),
          (227, 397), (160, 359), (140, 328), (57, 338), (126, 706), (482, 706), (482, 622), (197, 622), (158, 430),
          (190, 452), (258, 475), (293, 475), (387, 475), (516, 346), (516, 243), (516, 147), (459, 75), (390, -12),
          (271, -12), (173, -12), (112, 42), (50, 98), (42, 188)],
    '6': [(410, 534), (398, 586), (377, 609), (341, 646), (289, 646), (247, 646), (215, 623), (173, 592), (150, 535),
          (138, 506), (125, 423), (125, 369), (157, 418), (248, 464), (299, 464), (386, 464), (510, 334), (510, 232),
          (510, 165), (452, 49), (352, -12), (286, -12), (176, -12), (38, 147), (38, 335), (38, 543), (114, 637),
          (181, 719), (294, 719), (379, 719), (433, 671), (486, 625), (498, 541), (139, 232), (139, 188), (178, 103),
          (247, 60), (285, 60), (339, 60), (420, 150), (420, 227), (420, 300), (341, 387), (223, 387), (139, 301)],
    '7': [(47, 622), (47, 707), (511, 707), (511, 638), (476, 602), (409, 505), (341, 384), (290, 261), (271, 197),
          (246, 107), (238, 0), (147, 0), (148, 42), (165, 144), (181, 204), (212, 324), (271, 435), (301, 492),
          (365, 584), (398, 622)],
    '8': [(177, 388), (69, 428), (69, 534), (69, 614), (181, 719), (369, 719), (483, 608), (483, 532), (483, 428),
          (377, 388), (443, 366), (512, 271), (512, 205), (512, 112), (382, -12), (170, -12), (105, 50), (41, 110),
          (41, 207), (41, 277), (111, 371), (159, 537), (159, 485), (225, 422), (277, 422), (325, 422), (360, 454),
          (393, 485), (393, 579), (326, 646), (224, 646), (159, 582), (131, 207), (131, 168), (165, 99), (202, 79),
          (236, 60), (277, 60), (309, 60), (360, 81), (381, 101), (422, 140), (422, 268), (338, 350), (212, 350),
          (131, 269)],
    '9': [(139, 173), (150, 113), (210, 60), (258, 60), (300, 60), (359, 97), (398, 159), (412, 212), (418, 238),
          (425, 292), (425, 319), (425, 327), (425, 331), (424, 337), (399, 295), (352, 269), (308, 243), (253, 243),
          (164, 243), (42, 371), (42, 477), (42, 586), (169, 719), (267, 719), (335, 719), (452, 644), (512, 503),
          (512, 373), (512, 235), (453, 73), (335, -12), (256, -12), (171, -12), (119, 34), (65, 81), (55, 166),
          (415, 481), (415, 557), (333, 646), (277, 646), (218, 646), (132, 552), (132, 474), (132, 404), (173, 363),
          (215, 320), (336, 320), (415, 407)]
}


def parseWoff():
    font = TTFont('ed62e738.woff')
    glyfList = list(font['glyf'].keys())
    result = dict()
    for key in glyfList:
        # 剔除非数字的字体
        if key[0:3] == 'uni':
            # 循环判断坐标值是否与预设值一致
            for d in data.keys():
                if data[d] == list(font['glyf'][key].coordinates):
                    val = "&#x" + key.lower().replace('uni', "") + ";"
                    result[val] = d
    return result


def parseString(string, parseDict):
    """
    # 破解加密数据
    params:
    string:需要解密的字符串
    parseDict:Woff映射表
    return:解密后字符串
    """
    for key in parseDict.keys():
        string = string.replace(key, parseDict[key])
    return string


# parseDict = parseWoff()
# string = "&#xe8ef;&#xe031;"
# st = parseString(string, parseDict) # 最终结果值
def main():
    # getGlyphCoordinates()
    parseDict = parseWoff()
    print(parseDict)
    string = "&#xe8ef;&#xe031;"
    string = '折扣商品&#xf0c0;.&#xead1;折起'
    st = parseString(string, parseDict)  # 最终结果值
    print(st)


if __name__ == '__main__':
    main()
